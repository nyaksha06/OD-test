 COMPONENT CATEGORIZATION

  A. Hardware Components

  Onboard the Drone (flies with it):

  | Component                             | Role                                     |
| ------------------------------------- | ---------------------------------------- |
| **Flight Controller** (Pixhawk, etc.) | Main autopilot brain                     |
| **Raspberry Pi**                      | Companion computer (object detection)    |
| **Camera** (Pi Cam / USB)             | Captures live video for object detection |
| **GPS Module**                        | Global positioning                       |
| **Magnetometer**                      | Compass                                  |
| **Barometer** (usually built-in)      | Altitude sensor                          |
| **IMU** (Gyroscope + Accelerometer)   | Orientation & stabilization              |
| **ESCs + Motors + Propellers**        | Flight propulsion system                 |
| **LiPo Battery**                      | Power supply                             |
| **Power Module / PDB**                | Voltage regulation and distribution      |
| **Telemetry Radio (Air Unit)**        | Communication with GCS                   |
| **Rangefinder / LiDAR** (optional)    | Altitude/obstacle data                   |
| **RC Receiver** (optional)            | Receives manual control commands         |


 On the Ground:

 | Component                         | Role                                  |
| --------------------------------- | ------------------------------------- |
| **GCS Computer (Laptop/Desktop)** | Mission planning, telemetry, tuning   |
| **RC Transmitter** (if used)      | Manual control override               |
| **Telemetry Radio (Ground Unit)** | Receives data from drone in real-time |



B. Software Components

Runs Onboard the Drone:

| Software                          | Runs On              | Purpose                                |
| --------------------------------- | -------------------- | -------------------------------------- |
| **ArduPilot (Copter)**            | On Flight Controller | Autonomous flight control              |
| **Raspberry Pi OS**               | On Raspberry Pi      | Operating system for Pi                |
| **OpenCV / PyTorch / TensorFlow** | On Raspberry Pi      | Object detection and vision processing |
| **MAVLink communication**         | FC â†” Pi              | Command and telemetry exchange         |
| **MAVProxy / DroneKit / MAVROS**  | On Raspberry Pi      | Talk to Pixhawk from Pi (via MAVLink)  |


Runs on Ground Station:

| Software                                 | Runs On                  | Purpose                                |
| ---------------------------------------- | ------------------------ | -------------------------------------- |
| **Mission Planner** (Windows)            | Ground Laptop            | Mission setup, telemetry, logs, tuning |
| **QGroundControl** (Windows/Linux/macOS) | Ground Laptop            | Alternative GCS                        |
| **MAVProxy**                             | Ground Laptop (optional) | Lightweight command-line GCS           |






Deep Dive into Firmware: ArduPilot vs. PX4
==========================================

Both ArduPilot and PX4 are powerful open-source flight control platforms. While they aim for similar goals, their architecture, development history, and internal mechanisms differ significantly.

1. Architectural Overview
--------------------------
ArduPilot:
- Monolithic with modular internal design.
- Separate applications: ArduCopter, ArduPlane, ArduRover.
- Uses AP_HAL (Hardware Abstraction Layer) to support diverse hardware.
- Runs on ChibiOS RTOS.
- Highly customizable via .param configuration files.

PX4:
- Modular, layered architecture.
- Core communication uses uORB (publish-subscribe message bus).
- Runs on NuttX RTOS (POSIX-like).
- Composed of independent microservices/modules.
- Codebase is clearly structured (src/drivers, src/modules, src/lib, etc.).

2. Key Internal Components
--------------------------

a. Sensor Drivers & Acquisition
- ArduPilot: Drivers integrated within AP_HAL and sensor libraries.
- PX4: Separate modules publish data via uORB topics.

b. Sensor Pre-processing & Calibration
- ArduPilot: In-firmware calibration routines and filtering (e.g., low-pass).
- PX4: Calibration + advanced filtering (e.g., notch filters for vibrations).

c. State Estimation (Sensor Fusion)
- Purpose: Combines IMU, GPS, baro, etc. to estimate position, attitude, velocity.
- ArduPilot:
  - Uses EKF3 (Extended Kalman Filter).
  - Supports multiple EKF instances and dynamic sensor selection.
- PX4:
  - EKF2/EKF3 used for state estimation.
  - Modular structure enables easy EKF replacement/testing.

d. Flight Modes & Mission Planning
- ArduPilot:
  - Wide range of flight modes (Stabilize, AltHold, Auto, RTL, etc.).
  - Missions managed via MAVLink in GCS (e.g., Mission Planner).
  - Rich failsafe logic (RC loss, battery, geofence, etc.).
- PX4:
  - Flight modes are modular (e.g., mc_att_controller).
  - Mission execution handled by commander module.
  - Configurable failsafe system.

e. Control Loops (PID & Advanced Control)
- Purpose: Stabilize and navigate using cascaded loops:
  - Inner loop: Attitude control.
  - Middle loop: Altitude control.
  - Outer loop: Position control.
- ArduPilot:
  - PID tuning via exposed parameters (e.g., ACRO_YAW_P).
  - Supports advanced filtering and feedforward control.
- PX4:
  - Cascaded PID loops.
  - Similar tuning tools via QGroundControl.
  - Fast adoption of research-level control algorithms.

f. Actuator Output & Mixer
- ArduPilot:
  - Predefined mixers for multirotors, VTOLs, fixed-wing.
  - Supports servo control for traditional aircraft.
- PX4:
  - Uses flexible mixer modules (mixer_module).
  - Handles motor/ESC/servo output via actuator control module.
- Both: Support PWM, OneShot, MultiShot, and DShot protocols.

g. Telemetry & MAVLink Communication
- MAVLink: Standard protocol used in both.
- ArduPilot:
  - Extensive MAVLink usage (GCS, companion computers).
- PX4:
  - Uses MAVSDK for high-level app integration.

h. Logging
- ArduPilot: Logs in .bin/.log format. Tools: MAVExplorer, APM Planner.
- PX4: Logs in .ulg format. Tools: Flight Review, PX4 log analyzers.
- Importance: Essential for debugging, tuning, and post-flight analysis.

3. Development Environment & Toolchain
--------------------------------------
ArduPilot:
- Build System: waf (Python-based).
- Tools: Git, VS Code, Python scripts.
- Simulation: SITL + FlightGear/X-Plane/Gazebo.
- Debugging: GDB + logging.

PX4:
- Build System: CMake + Make.
- Tools: Git, VS Code, Eclipse.
- Simulation: Gazebo, jMAVSim, SITL.
- Debugging: GDB, px4-shell.

4. Community & Support
----------------------
ArduPilot:
- Large, active community (forums, Discord, Gitter).
- Broad documentation across wikis.
- Popular with hobbyists, industry, and academia.

PX4:
- Strong research and commercial support.
- Organized documentation (PX4 Devguide).
- Preferred for modular and robotics-friendly applications.




# Clone and initialize submodules
git clone https://github.com/ArduPilot/ardupilot
cd ardupilot
git submodule update --init --recursive

# Install dependencies (on Ubuntu)
Tools/environment_install/install-prereqs-ubuntu.sh

# Build for SITL
./waf configure --board sitl
./waf copter  # or plane, rover, etc.
